<?php
use \QuakeMap\Entity;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-16 at 20:53:10.
 */
class EntityTest extends \PHPUnit_Framework_TestCase
{
    private $original =
        [[[ 288, 8192, 8192 ], [ 288, -8192, 8192 ], [ 288, 8192, -8192 ]],
            [[ -8192, -184, 8192 ], [ 8192, -184, 8192 ], [ -8192, -184, -8192 ]],
            [[ 8192, 8192, 408 ], [ 8192, -8192, 408 ], [ -8192, -8192, 408 ]],
            [[ 5868, -5716, 8192 ], [ -5716, 5868, 8192 ], [ -5716, 5868, -8192 ]],
            [[ -5724, 5860, 8192 ], [ 5860, -5724, 8192 ], [ -5724, 5860, -8192 ]],
            [[ 8192, 5520, 6064 ], [ -8192, 5520, 6064 ], [ 8192, -6064, -5520 ]]];

    private $should;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->should = '{' . PHP_EOL .
            '"classname" "worldspawn"' . PHP_EOL .
            '// brush 0' . PHP_EOL .
            '{' . PHP_EOL .
            '( 288 -136 408 ) ( 288 -152 408 ) ( 288 -152 392 ) e2u3/floor1_2 0 0 0 1 1 1 1 1' . PHP_EOL .
            '( 336 -184 408 ) ( 336 -184 360 ) ( 320 -184 360 ) e2u3/floor1_2 0 0 0 1 1 1 1 1' . PHP_EOL .
            '( 288 -136 408 ) ( 336 -184 408 ) ( 320 -184 408 ) e2u3/floor1_2 0 0 0 1 1 1 1 1' . PHP_EOL .
            '( 288 -136 408 ) ( 336 -184 360 ) ( 336 -184 408 ) e2u3/floor1_2 0 0 0 1 1 1 1 1' . PHP_EOL .
            '( 288 -152 408 ) ( 320 -184 408 ) ( 320 -184 360 ) e2u3/floor1_2 0 0 0 1 1 1 1 1' . PHP_EOL .
            '( 288 -136 408 ) ( 288 -152 392 ) ( 320 -184 360 ) e2u3/floor1_2 0 0 0 1 1 1 1 1' . PHP_EOL .
            '}' . PHP_EOL .
            '}';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testEntityGeneration()
    {
        $mapEntity = new Entity();
        $mapEntity->addAttribute("classname", "worldspawn");
        $mapEntity->newBrush();
        foreach ($this->original as $plane) {
            $face = new \stdClass();
            $face->points = $plane;
            $face->texture = 'e2u3/floor1_2';
            $face->properties = [0, 0, 0, 1, 1, 1, 1, 1];

            $mapEntity->addBrushPlane($face);
        }
        $mapEntity->finishBrush();

        $this->assertEquals($this->should, (string)$mapEntity);
    }
}
